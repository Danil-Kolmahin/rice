---
- hosts: localhost
  tasks:
    - name: Enable sudo for wheel group
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: '^# %wheel ALL=\(ALL:ALL\) ALL'
        line: "%wheel ALL=(ALL:ALL) ALL"
        state: present
        validate: "visudo -cf %s"
      become: true

    - name: Restricting root login
      ansible.builtin.user:
        name: root
        password: "!"
      become: true

    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ hostname }}"

    - name: Copy dotfiles
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/home/{{ username }}/"
        owner: "{{ username }}"
        group: "{{ username }}"
        directory_mode: "755"
        mode: "0644"
      with_items:
        - .zshrc
        - .zshenv
        - .zprofile
        - .local
        - .config
      register: copy_dotfiles

    - name: Ensure permissions on binaries
      ansible.builtin.file:
        path: "/home/{{ username }}/.local/bin"
        recurse: yes
        mode: "0755"
      when: >
        copy_dotfiles.results
        | selectattr('item', 'equalto', '.local')
        | map(attribute='changed')
        | first

    - name: Install packages
      ansible.builtin.pacman:
        name:
          # - uv # should be beforehand
          # - git # should be beforehand
          - zsh
          - alacritty
          - sway
          - mako # notifycations
          - swaylock # lock screen for sway
          - wmenu # app launcher
          - ttf-ibm-plex # font, TODO: consider other options - ttf-jetbrains-mono, iosevka-nerd-font
          - qutebrowser
          - qt6-base # for qutebrowser TODO: check if actually needed
          - qt6-webengine # for qutebrowser TODO: check if actually needed
          - qt6-wayland # for qutebrowser TODO: check if actually needed
          - mesa # for qutebrowser TODO: check if actually needed
          - xcb-util-cursor # for qutebrowser TODO: check if actually needed
          - flatpak
          - base-devel # for yay tool build
          - ffmpeg # for video/audio processing
          - vlc # media player TODO: search for cli tools
          - pipewire # for audio handling
          - wireplumber # pipewire helper
          - pipewire-pulse # pipewire helper - pulseaudio replacement
          - man-db # main man repo
          - man-pages # provides both the Linux and the POSIX.1 man pages
          - tldr # upgraded man
          - openssh # ssh/scp/sftp
          - curl
          - nvm # TODO: needs to be added to .zshrc
          - docker
          - docker-compose
          - lazydocker
          - htop
          - tree
          - jq
          - yq
          - k9s
          - neovim
          - pastel # color palets
          # - plantuml # TODO: test
          # - unipicker/rofimoji # emoji
          # - gdu # disk usage display
          # - neofetch/fastfetch # system info
          # - pass # password manager TODO: configure and test
          # - mc/vifm # possible file manager
          # - upower/powertop/auto-cpufreq/tlp # possible eco power/resource management
        state: present
      become: true

    - name: Enable and start docker.service
      ansible.builtin.systemd:
        name: docker.service
        enabled: yes
        state: started

    - name: Ensure user is in docker group
      ansible.builtin.user:
        name: "{{ username }}"
        groups: docker
        append: yes

    # relogin !!!

    - name: Set default shell to zsh
      ansible.builtin.user:
        name: "{{ username }}"
        shell: /usr/bin/zsh
      become: true

    - name: Configure git username
      community.general.git_config:
        name: user.name
        value: "{{ git_user_name }}"
        scope: global

    - name: Install flatpak packages
      community.general.flatpak:
        name:
          - io.github.ungoogled_software.ungoogled_chromium
          - me.iepure.devtoolbox
          - com.belmoussaoui.Obfuscate

    - name: Create the `aur_builder` user
      ansible.builtin.user:
        name: aur_builder
        create_home: yes
        group: wheel
      become: yes

    - name: Allow the `aur_builder` user to run `sudo pacman` without a password
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/11-install-aur_builder
        line: "aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman"
        create: yes
        mode: 0644
        validate: "visudo -cf %s"
      become: yes

    - name: Install yay from AUR manually
      ansible.builtin.shell: |
        sudo -u aur_builder bash -c '
        git clone https://aur.archlinux.org/yay.git /home/aur_builder/yay || echo "already cloned"
        cd /home/aur_builder/yay
        makepkg -si --noconfirm
        '
      args:
        executable: /bin/bash
        creates: /usr/bin/yay

    - name: Install AUR packages manually
      vars:
        aur_packages:
          - chromium-widevine # for qutebrowser, allows streaming (DRM content)
      ansible.builtin.shell: |
        sudo -u aur_builder yay -S --noconfirm --needed {{ aur_packages | join(' ') }}
      args:
        executable: /bin/bash
      register: aur_install_result
      changed_when: "'Downloading' in aur_install_result.stdout"

    - name: Check if qutebrowser is already the default browser
      ansible.builtin.shell: xdg-mime query default x-scheme-handler/http
      register: current_default_browser
      changed_when: false

    - name: Set qutebrowser as default web browser
      ansible.builtin.shell: xdg-settings set default-web-browser org.qutebrowser.qutebrowser.desktop
      when: "'org.qutebrowser.qutebrowser.desktop' not in current_default_browser.stdout"
      changed_when: true

    - name: Set qutebrowser as default for http and https
      ansible.builtin.shell: xdg-mime default org.qutebrowser.qutebrowser.desktop x-scheme-handler/http x-scheme-handler/https
      when: "'org.qutebrowser.qutebrowser.desktop' not in current_default_browser.stdout"
      changed_when: true

    # maybe needed
    # exec systemctl --user set-environment "WAYLAND_DISPLAY=${WAYLAND_DISPLAY}" "XDG_CURRENT_DESKTOP=${XDG_CURRENT_DESKTOP:-sway:wlroots}"
    # more here: https://github.com/swaywm/sway/wiki/XDG-Desktop-Portal-configuration
    - name: Check if WAYLAND_DISPLAY is in systemd user env
      ansible.builtin.command: systemctl --user show-environment
      register: systemctl_user_env
      changed_when: false

    - name: Export Wayland vars if missing
      ansible.builtin.command: >
        systemctl --user set-environment
        WAYLAND_DISPLAY={{ lookup('env', 'WAYLAND_DISPLAY') }}
        XDG_CURRENT_DESKTOP={{ lookup('env', 'XDG_CURRENT_DESKTOP') | default('sway:wlroots') }}
      when: "'WAYLAND_DISPLAY' not in systemctl_user_env.stdout"
